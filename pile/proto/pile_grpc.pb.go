// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobPileManagerClient is the client API for JobPileManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobPileManagerClient interface {
	// Start a job and return the result which contains the job ID.
	Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobStartResult, error)
	// Stop a given job.
	Stop(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*StopResult, error)
	// Status obtains the status of a given job.
	Status(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*StatusResult, error)
	// Output obtains the output of a given job.
	Output(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (JobPileManager_OutputClient, error)
}

type jobPileManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobPileManagerClient(cc grpc.ClientConnInterface) JobPileManagerClient {
	return &jobPileManagerClient{cc}
}

func (c *jobPileManagerClient) Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobStartResult, error) {
	out := new(JobStartResult)
	err := c.cc.Invoke(ctx, "/JobPileManager/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPileManagerClient) Stop(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*StopResult, error) {
	out := new(StopResult)
	err := c.cc.Invoke(ctx, "/JobPileManager/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPileManagerClient) Status(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*StatusResult, error) {
	out := new(StatusResult)
	err := c.cc.Invoke(ctx, "/JobPileManager/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobPileManagerClient) Output(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (JobPileManager_OutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobPileManager_ServiceDesc.Streams[0], "/JobPileManager/Output", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobPileManagerOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobPileManager_OutputClient interface {
	Recv() (*OutputChunk, error)
	grpc.ClientStream
}

type jobPileManagerOutputClient struct {
	grpc.ClientStream
}

func (x *jobPileManagerOutputClient) Recv() (*OutputChunk, error) {
	m := new(OutputChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobPileManagerServer is the server API for JobPileManager service.
// All implementations must embed UnimplementedJobPileManagerServer
// for forward compatibility
type JobPileManagerServer interface {
	// Start a job and return the result which contains the job ID.
	Start(context.Context, *JobStartRequest) (*JobStartResult, error)
	// Stop a given job.
	Stop(context.Context, *JobRequest) (*StopResult, error)
	// Status obtains the status of a given job.
	Status(context.Context, *JobRequest) (*StatusResult, error)
	// Output obtains the output of a given job.
	Output(*JobRequest, JobPileManager_OutputServer) error
	mustEmbedUnimplementedJobPileManagerServer()
}

// UnimplementedJobPileManagerServer must be embedded to have forward compatible implementations.
type UnimplementedJobPileManagerServer struct {
}

func (UnimplementedJobPileManagerServer) Start(context.Context, *JobStartRequest) (*JobStartResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJobPileManagerServer) Stop(context.Context, *JobRequest) (*StopResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedJobPileManagerServer) Status(context.Context, *JobRequest) (*StatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedJobPileManagerServer) Output(*JobRequest, JobPileManager_OutputServer) error {
	return status.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (UnimplementedJobPileManagerServer) mustEmbedUnimplementedJobPileManagerServer() {}

// UnsafeJobPileManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobPileManagerServer will
// result in compilation errors.
type UnsafeJobPileManagerServer interface {
	mustEmbedUnimplementedJobPileManagerServer()
}

func RegisterJobPileManagerServer(s grpc.ServiceRegistrar, srv JobPileManagerServer) {
	s.RegisterService(&JobPileManager_ServiceDesc, srv)
}

func _JobPileManager_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPileManagerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobPileManager/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPileManagerServer).Start(ctx, req.(*JobStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPileManager_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPileManagerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobPileManager/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPileManagerServer).Stop(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPileManager_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobPileManagerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobPileManager/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobPileManagerServer).Status(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobPileManager_Output_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobPileManagerServer).Output(m, &jobPileManagerOutputServer{stream})
}

type JobPileManager_OutputServer interface {
	Send(*OutputChunk) error
	grpc.ServerStream
}

type jobPileManagerOutputServer struct {
	grpc.ServerStream
}

func (x *jobPileManagerOutputServer) Send(m *OutputChunk) error {
	return x.ServerStream.SendMsg(m)
}

// JobPileManager_ServiceDesc is the grpc.ServiceDesc for JobPileManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobPileManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JobPileManager",
	HandlerType: (*JobPileManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _JobPileManager_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _JobPileManager_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _JobPileManager_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Output",
			Handler:       _JobPileManager_Output_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pile.proto",
}
